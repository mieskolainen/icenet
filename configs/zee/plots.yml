# Plot steering

# -----------------------------------------------------------------------
FINAL_STATE_FILTER: &FINAL_STATE_FILTER

  filter[0]:
    operator: null    # null (single set), 'cartesian_and', 'cartesian_or'
    sets: [0]         # input set ids (one or several)
  
  # ... more filters here

  # -------------------------------------------------

  set[0]:
    expand: 'set' # 'set', 'vetoset' or 'powerset' which goes through all boolean vector combinations
    cutset:
      # Latex description is for boolean [0,1] per cut
      [{latex: ['', 'EB'],  cut: '-1.444 < probe_eta && probe_eta < 1.444'},
       {latex: ['', 'EE-'], cut: '-2.5   < probe_eta && probe_eta < -1.566'},
       {latex: ['', 'EE+'], cut: '1.566  < probe_eta && probe_eta < 2.5'}]
  
  # ... more sets here

# -----------------------------------------------------------------------

basic:
  active: true
  nbins:  70
  percentile_range: [0.5, 99.5]
  exclude_vals: [null, -999]
  plot_unweighted: True

corrmat:
  active: true

# MVA output score over pairwise pairwise observables
contours:
  active: false

# Plot ROC curves
ROC:
  active: true
  num_bootstrap: 0
  xmin: 1.0E-4
  #set_filter: *FINAL_STATE_FILTER

## Plot 1D histograms of observables re-weighted with the ML model output score f
OBS_reweight:
  
  active: true
  
  save_parquet: true      # Save data and results to a parquet file
  
  # Operation mode
  transform_mode: 'LR'    # 'LR' [f / (1 - f)],
                          # 'inverse-LR' [(1 - f) / f],
                          # 'DeepEfficiency' [1 / f],
                          # 'direct' [f],
                          # 'identity' [1]
  
  # Class IDs
  C0: 0                   # <-- AI weights applied to this class
  C1: 1
  
  # Regularization
  EPS:  1.0E-8            # Technical
  maxW: 100               # Maximum ML weight cutoff
  lambda_shrink: 0.0      # log-space weight smoothing (0 no smoothing, 1 maximum)
  
  # Renormalize weights (set null for no renormalization)
  renorm_origin: 1        # Reference class ID (0,1) to use for the renormalization
  
  # Temperature values
  tau_values: [0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.20, 1.25, 1.30]
  
  #var: ['.*']   # RegExp supported
  var: ['^(?!raw_weight$).*']
  #var: ['probe_eta', 'probe_pt', 'fixedGridRhoAll', 'probe_mvaID']
  
  edges: {'nbin': 50, 'q': [0.01, 0.99], 'space': 'linear'}
  
  #set_filter: *FINAL_STATE_FILTER


## Binned ROC plots can be 1D or 2D (powerset filtering not supported here)
ROC_binned:
  active: false
  num_bootstrap: 200
  xmin: 1.0E-4
  
  #plot[0]:
  #  var:   ['x_hlt_pt']
  #  edges: [4.0, 6, 8.0, 10.0, 12.0, 15.0, 10000]
  
  #plot[1]:
  #  var:   ['x_hlt_eta', 'x_hlt_pt']
  #  edges: [[-1.5, -1.15, -0.75, 0.0, 0.75, 1.15, 1.5],
  #          [4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 15.0, 10000]]

## MVA output density (1D)
MVA_output:
  active: true
  edges: 80
  #set_filter: *FINAL_STATE_FILTER

## (MVA output x external variable) density (2D)
# Set filter can be applied only per one plot[i] identifier!
MVA_2D:
  active: false
  
  plot[0]:
    var:   ['.*'] # RegExp supported
    edges: [{'nbin': 50, 'q': [0.0,  1.0],  'space': 'linear'},
            {'nbin': 50, 'q': [0.0,  0.95], 'space': 'linear'}]
    density: True
  
  #plot[1]:
  #  var:   ['tagger_score']
  #  edges: [{'nbin': 50, 'q': [0.0001, 0.9999],  'space': 'linear'},
  #          {'nbin': 50, 'minmax': [0.0, 1.0],   'space': 'linear'}]
  #  density: True
  #
  #  #set_filter: *FINAL_STATE_FILTER
  #  
  #  # -----------------------------
  #  # Powerset correlation plot parameters
  #  xlim:
  #    # For each class [[lower, upper], ... [lower, upper]
  #    pearson:     [[-0.15, 0.30], [-0.15, 0.30]]
  #    abs_pearson: [[0.0, 0.30],   [0.0, 0.30]]
  #    disco:       [[0.0, 0.30],   [0.0, 0.30]]
  #    MI:          [[0.0, 0.12],   [0.0, 0.12]]
  #  # -----------------------------
  